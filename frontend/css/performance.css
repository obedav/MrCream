/* ========================================
   MRCREAM PERFORMANCE OPTIMIZATIONS
   Modern Best Practices - 2025
   ======================================== */

/* ========================================
   1. GPU ACCELERATION
   ======================================== */

/* Enable hardware acceleration for animated elements */
.floating-element,
.hero-badge,
.stat-item,
.btn-hero-primary,
.btn-hero-secondary,
.swiper-slide,
.navbar {
    will-change: transform;
    transform: translateZ(0);
    backface-visibility: hidden;
    -webkit-backface-visibility: hidden;
}

/* Remove will-change after animation completes */
.animated-complete {
    will-change: auto;
}

/* ========================================
   2. CSS CONTAINMENT
   ======================================== */

/* Contain layout and paint for better performance */
.hero-content,
.stat-item,
.floating-element,
.product-showcase,
.footer-section {
    contain: layout style paint;
}

/* Strict containment for isolated components */
.card,
.modal,
.toast {
    contain: strict;
}

/* ========================================
   3. CRITICAL RENDERING PATH
   ======================================== */

/* Above the fold content - optimize rendering */
.hero-swiper,
.navbar {
    content-visibility: visible;
}

/* Below the fold content - defer rendering */
.footer-section,
.newsletter-section {
    content-visibility: auto;
    contain-intrinsic-size: 0 600px;
}

/* ========================================
   4. FONT LOADING OPTIMIZATION
   ======================================== */

/* Prevent FOIT (Flash of Invisible Text) */
@font-face {
    font-family: 'Poppins';
    font-display: swap;
    font-weight: 300 800;
    src: local('Poppins');
}

/* Reduce font variations loaded */
body {
    font-family: 'Poppins', -apple-system, BlinkMacSystemFont, 'Segoe UI',
                 Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
    font-synthesis: none;
    text-rendering: optimizeLegibility;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
}

/* ========================================
   5. IMAGE OPTIMIZATION
   ======================================== */

/* Lazy load images below the fold */
img {
    loading: lazy;
    decoding: async;
}

/* Critical images - load immediately */
.hero-swiper img,
.navbar img {
    loading: eager;
}

/* Responsive images - prevent layout shift */
img {
    max-width: 100%;
    height: auto;
    display: block;
}

/* Aspect ratio boxes to prevent CLS */
.img-aspect-16-9 {
    aspect-ratio: 16 / 9;
    object-fit: cover;
}

.img-aspect-1-1 {
    aspect-ratio: 1 / 1;
    object-fit: cover;
}

.img-aspect-4-3 {
    aspect-ratio: 4 / 3;
    object-fit: cover;
}

/* ========================================
   6. ANIMATION PERFORMANCE
   ======================================== */

/* Limit animations to transform and opacity */
@keyframes fadeIn {
    from {
        opacity: 0;
        transform: translateY(20px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

@keyframes slideIn {
    from {
        transform: translateX(-100%);
    }
    to {
        transform: translateX(0);
    }
}

@keyframes scaleIn {
    from {
        transform: scale(0.9);
        opacity: 0;
    }
    to {
        transform: scale(1);
        opacity: 1;
    }
}

/* Reduce motion for users who prefer it */
@media (prefers-reduced-motion: reduce) {
    *,
    *::before,
    *::after {
        animation-duration: 0.01ms !important;
        animation-iteration-count: 1 !important;
        transition-duration: 0.01ms !important;
        scroll-behavior: auto !important;
    }
}

/* ========================================
   7. LAYOUT STABILITY (CLS Prevention)
   ======================================== */

/* Reserve space for dynamic content */
.skeleton {
    background: linear-gradient(
        90deg,
        #f0f0f0 25%,
        #e0e0e0 50%,
        #f0f0f0 75%
    );
    background-size: 200% 100%;
    animation: loading 1.5s infinite;
    border-radius: 4px;
}

@keyframes loading {
    0% {
        background-position: 200% 0;
    }
    100% {
        background-position: -200% 0;
    }
}

/* Prevent layout shift from fonts */
body {
    size-adjust: 100%;
}

/* ========================================
   8. PAINT OPTIMIZATION
   ======================================== */

/* Reduce paint complexity */
.complex-gradient {
    /* Use solid colors or simple gradients on low-end devices */
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
}

/* Composite layers for smooth animations */
.smooth-transform {
    transform: translateZ(0);
    isolation: isolate;
}

/* ========================================
   9. RESOURCE HINTS
   ======================================== */

/* Preconnect to external domains */
link[rel="preconnect"] {
    /* Added via HTML head */
}

/* DNS prefetch for better performance */
link[rel="dns-prefetch"] {
    /* Added via HTML head */
}

/* Preload critical assets */
link[rel="preload"] {
    /* Added via HTML head */
}

/* ========================================
   10. SCROLL PERFORMANCE
   ======================================== */

/* Optimize scroll performance */
.scroll-container {
    overflow-y: auto;
    overscroll-behavior-y: contain;
    scroll-behavior: smooth;
}

/* Use passive event listeners hint */
.touch-scrollable {
    touch-action: pan-y;
    -webkit-overflow-scrolling: touch;
}

/* ========================================
   11. CRITICAL CSS INLINING
   ======================================== */

/* Above-the-fold critical styles */
.hero-swiper {
    min-height: 100vh;
    display: flex;
    align-items: center;
    justify-content: center;
}

.navbar {
    position: fixed;
    top: 0;
    width: 100%;
    z-index: 1030;
}

/* ========================================
   12. RESPONSIVE IMAGES
   ======================================== */

/* Optimize images for different screen sizes */
@media (max-width: 767px) {
    img {
        /* Smaller images on mobile */
        max-width: 100%;
    }
}

/* Use WebP with fallback */
.webp-supported img {
    /* Served via server-side detection or JS */
}

/* ========================================
   13. MINIMIZE REPAINTS
   ======================================== */

/* Group properties to minimize repaints */
.optimized-element {
    /* Batched style changes */
    transform: translate3d(0, 0, 0);
    opacity: 1;
    transition: transform 0.3s, opacity 0.3s;
}

/* ========================================
   14. REDUCE SELECTOR COMPLEXITY
   ======================================== */

/* Use simple, specific selectors */
.btn-primary { /* Good */ }
div.container > ul > li > a { /* Avoid */ }

/* Use classes instead of deep nesting */
.nav-link { /* Good */ }
nav ul li a { /* Less optimal */ }

/* ========================================
   15. ASYNC/DEFER SCRIPTS
   ======================================== */

/* Defer non-critical JavaScript */
/* <script src="app.js" defer></script> */

/* Async for independent scripts */
/* <script src="analytics.js" async></script> */

/* ========================================
   16. CODE SPLITTING
   ======================================== */

/* Load route-specific CSS only when needed */
.route-home { /* Home page specific */ }
.route-products { /* Products page specific */ }

/* ========================================
   17. CACHING STRATEGY
   ======================================== */

/* Cache static assets */
/* Handled via HTTP headers and service worker */

/* Version assets for cache busting */
/* style.css?v=1.2.3 */

/* ========================================
   18. MINIMIZE CSS
   ======================================== */

/* Remove unused CSS */
/* Use PurgeCSS or similar tools in production */

/* Combine media queries */
@media (max-width: 767px) {
    /* All mobile styles here */
}

/* ========================================
   19. NETWORK PERFORMANCE
   ======================================== */

/* Reduce HTTP requests */
/* Combine CSS files */
/* Use CSS sprites or SVG icons */

/* Enable compression */
/* Gzip/Brotli via server config */

/* ========================================
   20. RENDERING PERFORMANCE
   ======================================== */

/* Use CSS Grid and Flexbox efficiently */
.grid-container {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 1rem;
}

.flex-container {
    display: flex;
    gap: 1rem;
    flex-wrap: wrap;
}

/* Avoid expensive properties */
/* Prefer transform over top/left */
/* Prefer opacity over visibility */

/* ========================================
   21. MOBILE PERFORMANCE
   ======================================== */

/* Optimize for mobile devices */
@media (max-width: 767px) {
    /* Reduce animations */
    * {
        animation-duration: 0.2s !important;
    }

    /* Simplify shadows */
    * {
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1) !important;
    }

    /* Reduce blur effects */
    .glass-bg {
        backdrop-filter: blur(10px) !important;
    }
}

/* ========================================
   22. PRINT PERFORMANCE
   ======================================== */

@media print {
    /* Remove unnecessary elements */
    nav,
    .btn,
    .modal,
    .toast {
        display: none !important;
    }

    /* Optimize for printing */
    * {
        background: white !important;
        color: black !important;
        box-shadow: none !important;
    }

    /* Page breaks */
    h1, h2, h3 {
        page-break-after: avoid;
    }

    .section {
        page-break-inside: avoid;
    }
}

/* ========================================
   23. INTERSECTION OBSERVER
   ======================================== */

/* Elements to observe for lazy loading */
[data-lazy] {
    opacity: 0;
    transition: opacity 0.3s;
}

[data-lazy].loaded {
    opacity: 1;
}

/* ========================================
   24. SERVICE WORKER CACHING
   ======================================== */

/* Assets to cache offline */
/* Handled via sw.js */

/* ========================================
   25. PERFORMANCE MONITORING
   ======================================== */

/* Mark critical rendering points */
/* Use Performance API in JavaScript */

/* Long task detection */
/* Use PerformanceObserver for monitoring */
